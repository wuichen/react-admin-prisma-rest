datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id        Int      @default(autoincrement()) @id
  type      String
  name      String
  json      String?
  info      String
  companyId Int?
  company   Company?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model Card {
  id            Int    @default(autoincrement()) @id
  type          String
  cardType      String
  name          String
  lastFourDigit Int
  userId        Int?
  user          User?  @relation(fields: [userId], references: [id])
}

model Contact {
  id        Int      @default(autoincrement()) @id
  type      String
  number    String
  companyId Int?
  company   Company?
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model Company {
  id          Int         @default(autoincrement()) @id
  slug        String
  name        String
  description String
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  contact     Contact     @relation(fields: [contactId], references: [id])
  contactId   Int
  platformId  Int
  platform    Platform    @relation(fields: [platformId], references: [id])
  products    Products[]
  customers   Customers[]
  orders      Commands[]
  owner       User?       @relation(fields: [ownerId], references: [id])
  ownerId     Int?
  invoices    Invoices[]
  reviews     Reviews[]
}

model Country {
  id        Int        @default(autoincrement()) @id
  code      Int        @unique
  name      String
  currency  String
  platforms Platform[]
}

model Platform {
  id           Int          @default(autoincrement()) @id
  name         String?
  bannerImg    String?
  slug         String?      @unique
  ownerId      Int
  owner        User         @relation(fields: [ownerId], references: [id])
  description  String?
  companies    Company[]
  categories   Categories[]
  platformType String?
  countryId    Int?
  country      Country?     @relation(fields: [countryId], references: [id])
}

model User {
  id                       Int         @default(autoincrement()) @id
  createdAt                DateTime    @default(now())
  email                    String      @unique
  firstName                String?
  lastName                 String?
  password                 String
  token                    String?
  googleId                 String?
  walletId                 String?
  income                   Float?
  username                 String?
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  image                    String?
  imagePublicId            String?
  coverImage               String?
  coverImagePublicId       String?
  isOnline                 Boolean     @default(false)
  companies                Company[]
  platforms                Platform[]
  addresses                Address[]
  cards                    Card[]
  contacts                 Contact[]
  Customers                Customers[]
}

model Customers {
  id              Int        @default(autoincrement()) @id
  first_name      String
  last_name       String
  email           String
  address         String?
  zipcode         String?
  city            String?
  avatar          String?
  birthday        DateTime?
  first_seen      DateTime?  @default(now())
  last_seen       DateTime?  @default(now())
  has_ordered     Boolean?   @default(false)
  latest_purchase DateTime?
  has_newsletter  Boolean?   @default(false)
  groups          String[]
  nb_commands     Int?
  total_spent     Float?     @default(0)
  reviews         Reviews[]
  invoices        Invoices[]
  commands        Commands[]
  company         Company?   @relation(fields: [companyId], references: [id])
  companyId       Int?
  userId          Int
  user            User       @relation(fields: [userId], references: [id])
}

model Categories {
  id         Int        @default(autoincrement()) @id
  name       String
  products   Products[]
  platform   Platform?  @relation(fields: [platformId], references: [id])
  platformId Int?
}

model Products {
  id          Int         @default(autoincrement()) @id
  category    Categories? @relation(fields: [category_id], references: [id])
  category_id Int?
  reference   String?
  width       Float?
  height      Float?
  price       Float?
  thumbnail   String?
  image       String?
  description String?
  stock       Int?
  review      Reviews[]
  basket      Baskets[]
  company     Company?    @relation(fields: [companyId], references: [id])
  companyId   Int?
}

model Baskets {
  id         Int      @default(autoincrement()) @id
  command    Commands @relation(fields: [command_id], references: [id])
  command_id Int
  product_id Int
  quantity   Int
  product    Products @relation(fields: [product_id], references: [id])
}

model Commands {
  id             Int        @default(autoincrement()) @id
  reference      String?
  date           DateTime?  @default(now())
  customer_id    Int?
  customer       Customers? @relation(fields: [customer_id], references: [id])
  total_ex_taxes Float?
  delivery_fees  Float?
  tax_rate       Float?
  taxes          Float?
  total          Float?
  status         String?
  returned       Boolean?
  invoice        Invoices[]
  review         Reviews[]
  basket         Baskets[]
  company        Company?   @relation(fields: [companyId], references: [id])
  companyId      Int?
}

model Invoices {
  id             Int        @default(autoincrement()) @id
  date           DateTime?  @default(now())
  command_id     Int?
  command        Commands?  @relation(fields: [command_id], references: [id])
  customer_id    Int?
  customer       Customers? @relation(fields: [customer_id], references: [id])
  total_ex_taxes Float?
  delivery_fees  Float?
  tax_rate       Float?
  taxes          Float?
  total          Float?
  company        Company?   @relation(fields: [companyId], references: [id])
  companyId      Int?
}

model Reviews {
  id          Int        @default(autoincrement()) @id
  date        DateTime?  @default(now())
  status      String?
  command_id  Int?
  command     Commands?  @relation(fields: [command_id], references: [id])
  product_id  Int?
  product     Products?  @relation(fields: [product_id], references: [id])
  customer_id Int?
  customer    Customers? @relation(fields: [customer_id], references: [id])
  rating      Int?
  comment     String?
  company     Company?   @relation(fields: [companyId], references: [id])
  companyId   Int?
}